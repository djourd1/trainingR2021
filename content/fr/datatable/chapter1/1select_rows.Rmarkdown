---
title: Select Rows
linktitle: Select Rows
type: book
date: "2021-02-02T00:00:00+01:00"

# Prev/next pager order (if `docs_section_pager` enabled in `params.toml`)
weight: 20
---


```{r, echo=FALSE, warning=FALSE , message = FALSE}
#load packages 
library(data.table)
library(gapminder)
library(knitr)
```

## Learning objectives

Often when you want to understand your data or exclude some individuals that are outside the scope of the analysis you want to conduct, you will need to select subsamples of your data set.

In this section, you will learn how to take a subset of a data frame. 

At the end of the section, you should be able to select specific rows of a data set that will be selected by their row number, a logical criteria based on the different variables describing the rows, or randomly.  

## Converting the data into a data.table object

You will will convert the gapminder tibble into a data.table object; at the same time, I will give this new object a shorter name!
```{r}
DT <- data.table(gapminder)
```

In order to visualize better the effects of the commands you will apply, you will add a row_no variable to the data set. For the moment, you will do it using the standard syntax:

```{r}
DT$row_id <- 1:nrow(DT)
DT
```

## Selecting by row numbers

A first way to select the rows you want to work with is to specify a vector of row numbers. 

Contrary to data.frame, if selecting the rows is the only operation you want to perform, there is no need to put a comma after the range of numbers. However, including a comma will also work. Personally, I usually keep the comma, because it reminds me that I am working on the part `i`, and for compatibility with the data.frame.

```{r, echo=FALSE}
DT[1:4, ]
DT[c(1, 3, 5), ]
```

### Exercise 1: Select odd rows

Show only the odd rows of the data set DT. 

Tip: Since you have 1704 rows, I am not asking you to key in all the odd numbers between 1 and 1704 ! Instead find the right function to generate that sequence

{{< spoiler text="Click to see the solution" >}} 

```{r}
# create a sequence of odd number 
oddrows <- seq(from= 1, to = nrow(DT) , by=2, )
DT[oddrows, ]

```

{{< /spoiler >}}

### Exercise 2:

Compare the results of DT[c(1,4, 5), ] and DT[c(1,5,4)]



## Eliminating some rows

Sometimes, it will make more sense to eliminate a few rows. To do this, you can put a `-` sign in front of the range or the selection of rows. Make sure you use parenthesis around the range.

```{r}
DT[-(1:30), ]  #eliminates the first 30 rows
```

## Taking a random sub-sample of rows

Sometimes, you just want to take a random sub-sample of your data. To do this, you can take advantage of the function `sample()`.

The following command will select five random rows out of the existing 1704. 


```{r}
set.seed(1234567)   # the seed is used to make sure we have the same sample selection
DT[sample(1:nrow(DT), 5, replace=FALSE) , ]
```


*Note:* The command `sample(1:nrow(DT), 5, replace=FALSE)` will create a vector of five random numbers between 1 and the number of rows. So technically, you are generating a sequence of row numbers that will be used to select the rows to retain. 


### Exercise 3

1. Create a new data.table including the first 10 rows and name it `subDT`
2. Generate a subsample of `subDT` with 20 rows  (tip: understand what the argument replace is doing)

{{< spoiler text="Click to see the solution" >}} 

```{r}
# create a sequence of odd number 
subDT <- DT[1:10, ]
subDT[sample(1:nrow(subDT), 20, replace = TRUE)]
```
{{< /spoiler >}}


## Selecting rows based on a logical criterion

Let say, you want to look only at South Africa data. To do this, you will include a logical condition in the frame [...]. Only rows for which the condition is met will be selected.


```{r}
DT[country == "South Africa",]

```

Note that: 
+ An important feature of `data.table` is that within the frame of a data.table, columns can be referred to *as if they are variables*. Therefore, we simply refer to `country` as if it is a variable. We do not need to add the prefix `DT$` each time. Nevertheless, using `DT$city` would also work.

+ Only the rows that satisfy the condition `country == "South Africa"` are selected. Since there is nothing else left to do (the `j` part is empty), all columns from DT at rows corresponding to those row indices are returned as a data.table.

+ A comma after the condition is not required. Again, `DT[country == "South Africa" ]` would also work. 

### Exercise 4:

+ Select records from South Africa for years after 1995

{{< spoiler text="Click to see the solution" >}} 

```{r}
DT[country == "South Africa" & year > 1995, ]
```
{{< /spoiler >}}


## Advanced topic: using keys

In this section, we will look at another way of subsetting data.tables using keys.
Contrary to data.frame, data.table never use row names. Instead, in data.table you can set and use **keys**.

### Set, get and use keys on a data.table

#### Set a column as key in a data.table

To set a key, you can use the function `setkey()`. The function uses at least two arguments. The first argument is the name of the data.table. The second argument is the name of a column (column names are not quoted).

```{r}
setkey(DT, country) 
DT
```

Note that:

+ you did not have to assign the result back to a variable. The function returns the result invisibly.

+ The data.table is now sorted by the column you provided - country. 

Once a key is established, you can use the key to subset all rows where the country matches “South Africa”

```{r}
DT["South Africa"]  
```

Note: 

+ You enter directly the names of the city you want to subset on. This is because a key exists already.
+ The main purpose of setting up a key is not to simplify the syntax, but is related to speed. Although you will not see the difference with our very small data.table, the subsetting will be much faster with a key.

Indeed, you can enter a vector of country names that you want to subset on:

```{r}
DT[c( "Zimbabwe", "Mozambique")]  
```

##### Exercice 5

+ Check the difference between `DT[c( "Zimbabawe", "Mozambique")]` and `DT[c("Mozambique", "Zimbabwe")]`  


#### Set several columns as key in a data.table

```{r}
setkey(DT, year, country)
DT
```

They key will sort the data.table first by the column `year` and then by  `country`.
Once the key is established, you can again subset the data.table using the key

```{r}
DT[list(2002, "Mozambique")]
```

*How does this work*: 2002 is first matched against the first key column year. And within those matching rows, “Mozambique” is matched against the second key column `country` to obtain row indices where both  `year` and `country` match the given values.

Again the main purpose of the key is speed when you have a large data.table. 



Note that 

+ the keys have to be provided as a list
+ another way to declare a list within the data.table braces is `.( )`

So you can obtain the same results if you write:

```{r}
DT[.(2002, "Mozambique")]
```

Note that the different columns do not need to be of the same types


Although the key is built upon two columns, you can search on only one colum. When you search on the first column, just mention filter conditions for the first column (do not use commas here)

```{r}
setkey(DT, year, country)
DT[.(2002)]

DT[.(c(1997,2002))]

```

When you search on the second column, it is a bit trickier, since you cannot omit the first argument. A way around is then to use the function unique to identify all the cities mentioned in the column `city`.

```{r}
DT[.(unique(year), "South Africa")]

```

Not that sometimes, the combinations you are subsetting will not exist in the data.table
```{r}
DT[.(c(1997,2000), "South Africa")]

```

You can actually choose if queries that do not match should return NA or be skipped altogether using the nomatch argument.

```{r}
DT[.(c(1997,2000), "South Africa"), nomatch = FALSE]

```

#### What is the current key?

```{r}
setkey(DT, "country")
key(DT)
setkey(DT, "country", "year")
key(DT)

```


#### Eliminate a key

```{r}
setkey(DT, NULL)
key(DT)
```

## Advanced topics: Secondary indices

### Why do we need secondary indices ?

When using the `setkey()` command, behind the scene, you are computing the order vector for the column(s) provided and then you are reordering the entire data.table based on the order vector computed. Although this process has been optimized, this reordering can be expensive (especially with a large number of rows) and is not always the best strategy; 

In particular, unless your task involves **repeated subsetting on the same column**, fast key based subsetting could effectively be nullified by the time to reorder, depending on your data.table dimensions. 

For example, let say you want to subset on `country` then on `year`, then on `country`, and you want to use keys, you will need to :

1. calculate the order vector on country (fast)
2. reorder the data.table (slow)
3. subset using country key (super-fast)
4. calculate the order vector on year (fast)
5. reorder the data.table (slow)
6. subset using previous key (super-fast)
7. calculate the order vector on country (fast, but you have to do it again, since there is only one key at a time)
8. reorder the data.table (slow)
9. subset using country key (super-fast)

You can see that having to re-order the vector before subsetting is a wasteful under this scenario. 

When the subsetting is not always based on the same column, you are looking for a process that would not have to reorder your data.table everytime you want to subset on a new column, and you might want to keep "orderings" that was already done earlier step (in our case, you may want to keep to ordering vectors one on `city` and the other one on `previous` and use them when needed. Under this new scenario, you would:

1. calculate the order vector on country (fast)
2. subset using the ordering on country  (fast)
3. calculate the order vector on year (fast)
4. subset using year key (fast)
5. subset using country key (fast, and you do not have to recalculate the key)
...

This is what secondary indices are doing. 

Secondary indices are similar to keys in data.table, except for two major differences:

+ They only compute the order for the set of columns provided and stores that order vector in an additional attribute called index. 
+ There can be more than one secondary index for a data.table 

With these two differences, although they might not be as fast as keys in subsetting, your subsetting tasks might be faster when you need subset on different columns at different point of time of your research.

### Creating secondary indices

#### Explicit index creation

First you can create secondary indices using the command `setindex()`;

```{r}
setindex(DT, country)
head(DT)
```

Note that you do not need to save your results into a new variable. Note also that the data.table has not been reordered.
However, the index has been saved in the data.table. You can see this by either look at the structure of the data.table (for example using the `str()` command) or the command `indices()`).

```{r}
indices(DT)
str(DT)
```

#### When doing a traditional search using `==`  or `%in%`

At the moment, search using binary operators `==` and `%in%`, automatically create and save a secondary index as an attribute. 

```{r}
DT[country =="Zimbabwe", ]
```

```{r}
indices(DT)
```

Note here that although we did not create the index explicitely it has be created and added to the list of indices.

Note that auto-indexing can be disabled by setting the global argument options(datatable.auto.index = FALSE). Disabling auto indexing still allows to use indices created explicitly with setindex. You can disable indices fully by setting global argument options(datatable.use.index = FALSE). Although I do not see really a need for this !


