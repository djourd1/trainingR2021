---
title: "Long to Wide" 
linktitle: "Long to Wide" 
slug: longtowide
date: '2021-02-19'
type: book

# Prev/next pager order (if `docs_section_pager` enabled in `params.toml`)
weight: 40
---


## Learning objectives


In this section, you will learn how to use the function `dcast` of the data.table package.
At the end of this section you should be able to cast a long table into a wide table.

{{< figure library="true" src="longToWide.svg" >}}


```{r, echo=FALSE, warning=FALSE, echo=FALSE }
library(data.table)
set.seed(12345) #use set.seed to get a reproducible result
N <- 12
DT = data.table(id=rep(1:N), age = sample(30:60, N, TRUE), 
                city = sample(c("Pretoria", "Cape Town", "Durban"), N, TRUE),
                inc_2010 =sample(1000:2000,N,TRUE),
                inc_2015 =sample(1000:2000,N,TRUE),
                cap_2010 = sample(0:500, N, TRUE),
                cap_2015 = sample(0:500, N, TRUE))
DT[3,5] <- NA   #create a missing value

melted <- melt(DT, id=1:3, measure=patterns("inc_", "cap_"),
               value.name = c("income", "capital"))

melted[variable == 1, year := "2010"][variable == 2, year := "2015"]
melted <- melted[order(id)][, .(id, age, city, year,income, capital )]
melted <- rbind(melted, melted[sample(1:nrow(melted), size = 10), ])
melted$income  <- sample(1000:2000,nrow(melted),TRUE)
melted$capital <- sample(0:500,nrow(melted),TRUE)
melted <- melted[order(id, year)]
melted[, yearid := rowid(id, year)]

```


## From Long to Wide format

As a starting point, we will start with a data set that is quite similar to the last `melted` data.table that we created in the previous section. However, we added a few rows, in such a way that there might have several rows for a pair (id, year); you can think about a respondent that had two sources of income or two different capital assets.

To be able to identify the cases where there are several income or several capital assets in a year, a new column yearid was created. You can quickly sport the cases when yearid > 1 for the id=3, year = 2010 case.

```{r}
melted
```

To transform a data set from long to wide, you will use the command `dcast()`


```{r, eval=FALSE}
dcast(data, formula, fun.aggregate = NULL, sep = "_",
      ..., margins = NULL, subset = NULL, fill = NULL,
      drop = TRUE, value.var = guess(data),
      verbose = getOption("datatable.verbose"))
```

We need to provide information for the following attributes :
  
+ data = the data.table we want to reshape;
+ formula = a formula describing how we want to reformat the data;
+ the name of the variables that will be used to construct the new columns;
+ an aggregation function, since you can have several rows for a given combination of id variables.

Like `melt`, `dcast` is very flexible and you can obtain various shapes. You will also notice that `dcast` is able to provide an output even when you do not provide all the arguments. However, I would suggest that you pay great care to the output when you do not provide all the required attributes: `dcast` function might make some guesses for you and output  results in an expected format.

We will now review several classical cases. 

### Cast only one variable with one column per year

You can obtain this with the correct arguments in the formula and value.vars:

+ LHS of the formula will include the fixed variables
+ RHS of the formula will include the casting variable: here you want one column per year, so this is the variable `year`
+ value.vars will provide the column you will cast, here income
+ In case we have several lines income or capital we we want to sum them up 
```{r}
dcast(melted, id+age+city~year  , value.var = "income", fun.aggregate = sum)
```
{{< alert warning >}}
If you do not provide an aggregation function, dcast will take the  default function length; so instead of the sum of 
income, you will get the number of income sources:

```{r}
dcast(melted, id+age+city~year  , value.var = "income")
```
{{< /alert >}}

### Cast several variables each with one column per year


```{r}
dcast(melted, id+age+city~ year  , value.var = c("income", "capital"), fun.aggregate = sum)
```

### Cast and summarize values

Finally the following syntax using "." allows to aggregate the columns with identical start (e.g. income_2010, income_2015) while at the same time aggregating the rows with identical id+age+city.

```{r}
dcast(melted, id+age+city~ .  , value.var = c("income", "capital") , fun.aggregate = sum)
```
