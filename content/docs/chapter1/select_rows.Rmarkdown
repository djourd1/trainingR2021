---
title: Select Rows
linktitle: Select Rows
type: book
date: "2021-02-02T00:00:00+01:00"

# Prev/next pager order (if `docs_section_pager` enabled in `params.toml`)
weight: 2
---


```{r, echo=FALSE, warning=FALSE , message = FALSE}
#load packages - create same data set
library(data.table)
library(knitr)
set.seed(12345)
N <- 15
DT = data.table(id=rep(1:N), age = sample(30:50, N, TRUE), 
                city = sample(c("Pretoria", "Cape Town", "Durban"), N, TRUE),
                previous = sample(c("Pretoria", "Cape Town", "Durban"), N, TRUE),
                ans_1=sample(3,N,TRUE),
                ans_2=sample(3,N,TRUE),
                ans_3=sample(3,N,TRUE) )
DT[3, "ans_1"] <- NA   #create a missing value
```


## Selecting by row numbers

A first way to select the lines you want to work with is to specify a range of line numbers. If selecting the rows is the only operation you want to perform, there is no need to put a comma after the range of numbers. However, including a comma will also work. Personally, I usually keep the comma, because it reminds me that I am working on the part `i`


```{r, eval =FALSE}
ans <- DT[1:3, ]
ans
```

```{r, echo=FALSE}
ans <- DT[1:4, ]
kable(ans)
```

If the rows you want to work with are not in a continuous range, you can declare them in a more precise ways, for example, using the `c()` command to enumerate the row numbers

```{r, eval =FALSE}
ans <- DT[c(2, 5, 7), ]
ans
```

```{r, echo=FALSE}
ans <- DT[c(2, 5, 7), ]
kable(ans)
```

## Eliminating some rows

Sometimes, it will make more sense to eliminate a few rows. To do this, you can put a `-` sign in front of the range or the selection of rows. Make sure you use parenthesis around the range.

```{r, eval =FALSE}
ans <- DT[-(1:5), ]
ans
```

```{r, echo=FALSE}
ans <- DT[-(1:5), ]
kable(ans)
```


## Taking a random sub-sample of rows

Sometimes, you just want to take a random sub-sample of your data. To do this, you can take advantage of the function `sample()` and the function `nrow()`.

The following command will select three random rows out of the existing 10. 


```{r, eval=FALSE}
set.seed(1234567)
DT[sample(1:nrow(DT), 3, replace=FALSE) , ]
```

```{r, echo=FALSE}
set.seed(1234567)
kable(DT[sample(1:nrow(DT), 3, replace=FALSE) , ])
```

*Note:* The command `sample(1:nrow(DT), 3, replace=FALSE)` will create a vector of three random numbers between 1 and the number of rows. So technically, you are generating a sequence of row numbers that will be used to select the rows to retain. 


## Exercise

+ Eliminate the rows 2, 5, and 9 
+ Compare the results of DT[c(1,4, 5), ] and DT[c(1,5,4)]
+ Can you make a random sample of DT that would include 20 rows ?


## Selecting rows based on a logical criterion

Let say, you want to look only at the respondents living in Cape Town. To do this, you will include a logical condition in the frame [...]. Only rows that corresponds for which the condition is met will be selected.


```{r, eval=FALSE}
ans <- DT[city=="Cape Town",]
ans
```

```{r, echo=FALSE}
ans <- DT[city=="Cape Town"]
kable(ans)  
```

Note that: 
+ An important feature of `data.table` is that within the frame of a data.table, columns can be referred to *as if they are variables*. Therefore, we simply refer to `city` as if it is a variable. We do not need to add the prefix `DT$` each time. Nevertheless, using `DT$city` would work just fine.

+ Only the rows that satisfy the condition `city=="Cape Town"` are selected. Since there is nothing else left to do (the `j` part is empty), all columns from DT at rows corresponding to those row indices are returned as a data.table.

+ A comma after the condition is not required. Again, `DT[city=="Cape Town" ]` would also work. 

## Exercise

+ Select respondants from Cape Town whose age is greater or equal to 38

## Advanced topic: using keys

In this section, we will look at another way of subsetting data.tables using keys.

Contrary to data.frames, data.tables never use row names. Instead, in data.tables you can set and use **keys**.

### Set, get and use keys on a data.table

#### Set a column as key in a data.table

To set a key, you can use the function `setkey()`. The function uses at least two arguments. The first argument is the name of the data.table. The second argument is the name of a column (column names are not quoted).

```{r}
setkey(DT, city) 
head(DT)
```

Note that:

+ you did not have to assign the result back to a variable. The function returns the result invisibly.

+ The data.table is now sorted by the column we provided - city. 

Once a key is established, you can use the key to subset all rows where the city matches “Pretoria”

```{r}
DT["Pretoria"]  
```

Note that:

+ You enter directly the names of the city you want to subset on. This is because a key exist already.
+ The main purpose of setting up a key is not to simplify the syntax, but is related to speed. Although you will not see the difference with our very small data.table, the subsetting will be much faster with a key.

Indeed, you can enter a vector of city names that you want to subset on:

```{r}
DT[c( "Cape Town", "Pretoria")]  
```

Note:

+ Check the difference between `DT[c( "Cape Town", "Pretoria")]` and `DT[c("Pretoria", "Cape Town")]`  


#### Set several columns as key in a data.table

```{r}
setkey(DT, city, previous)
head(DT)
```

They key will sort the data.table first by the column `city` and then by  `previous`.

Once the key is established, you can again subset the data.table using the key

```{r}
DT[list("Durban", "Pretoria")]
```

*How does this work*: “Durban” is first matched against the first key column city. And within those matching rows, “Pretoria” is matched against the second key column `previous` to obtain row indices where both  `city` and `previous` match the given values.

Again the main purpose of the key is speed when you have a large data.table. 


Note that another way to declare a list within the data.table braces is `.( )`
So you can obtain the same results if you write:

```{r}
DT[.("Durban", "Pretoria")]
```

Note that the different columns do not need to be of the same types: city is a string, age is an integer variable. 

```{r}
setkey(DT, city, ans_1)
DT[.("Durban", 1)]
```

Note: Although the key is built upon two columns, you can search on only one colum

When you search on the first column, just mention filter conditions for the first column (do not use commas here)
```{r}
setkey(DT, city, previous)
DT[.("Durban")]

DT[.(c("Durban", "Pretoria"))]

```

When you search on the second column, it is a bit trickier, since you cannot omit the first argument. A way around is then to use the function unique to identify all the cities mentioned in the column `city`.

```{r}
DT[.(unique(city), "Durban")]

```

Not that sometimes, the combinations you are subsetting will not exist in the data.table
```{r}
setkey(DT, city, ans_1)
DT[.(unique(city), 1)]

```

You can actually choose if queries that do not match should return NA or be skipped altogether using the nomatch argument.

```{r}
DT[.(unique(city), 1), nomatch=NULL]

```


#### What is the current key?

```{r}
setkey(DT, "city")
key(DT)
setkey(DT, "city", "previous")
key(DT)


```


#### Eliminate a key

```{r}
setkey(DT, NULL)
key(DT)
```

## Advanced topics: Secondary indices

Secondary indices are similar to keys in data.table, except for two major differences:

+ they only compute the order for the set of columns provided and stores that order vector in an additional attribute called index.
+ There can be more than one secondary index for a data.table 

### Set and get secondary indices
